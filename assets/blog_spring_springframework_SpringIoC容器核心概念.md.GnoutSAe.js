import{_ as i}from"./chunks/container-magic.pXl2iG6J.js";import{_ as a,o,c as r,R as n}from"./chunks/framework.gZp3ZZFg.js";const l="/assets/三层架构组件.2VnsPTgR.jpg",t="/assets/Snipaste_2023-11-24_16-29-07.jynJUyUA.png",b=JSON.parse('{"title":"Spring IoC容器核心概念","description":"","frontmatter":{"cover":"/blog/spring/springframework/images/container-magic.png","recommend":false,"tag":["SpringFramework","IoC"],"date":"2023-11-28T21:00:00.000Z"},"headers":[],"relativePath":"blog/spring/springframework/SpringIoC容器核心概念.md","filePath":"blog/spring/springframework/SpringIoC容器核心概念.md","lastUpdated":1703552913000}'),e={name:"blog/spring/springframework/SpringIoC容器核心概念.md"},p=n('<h1 id="spring-ioc容器核心概念" tabindex="-1">Spring IoC容器核心概念 <a class="header-anchor" href="#spring-ioc容器核心概念" aria-label="Permalink to &quot;Spring IoC容器核心概念&quot;">​</a></h1><h2 id="_1-组件和组件管理概念" tabindex="-1">1 组件和组件管理概念 <a class="header-anchor" href="#_1-组件和组件管理概念" aria-label="Permalink to &quot;1 组件和组件管理概念&quot;">​</a></h2><h3 id="什么是组件" tabindex="-1">什么是组件？ <a class="header-anchor" href="#什么是组件" aria-label="Permalink to &quot;什么是组件？&quot;">​</a></h3><p>常规的三层架构请求处理流程：</p><p><img src="'+l+'" alt="三层架构组件"></p><h3 id="我们的期待" tabindex="-1">我们的期待 <a class="header-anchor" href="#我们的期待" aria-label="Permalink to &quot;我们的期待&quot;">​</a></h3><ul><li>有人替我们创建组件的对象</li><li>有人帮我们保存组件的对象</li><li>有人帮助我们自动组装</li><li>有人替我们管理事务</li><li>有人协助我们整合其他框架</li><li>......</li></ul><h3 id="spring充当组件管理角色-ioc" tabindex="-1">Spring充当组件管理角色(IoC) <a class="header-anchor" href="#spring充当组件管理角色-ioc" aria-label="Permalink to &quot;Spring充当组件管理角色(IoC)&quot;">​</a></h3><p>组件可以完全交给Spring框架进行管理，Spring框架替代了程序员原有的new对象和对象属性赋值动作等！</p><p>Spring具体的组件管理动作包含：</p><ul><li>组件对象实例化</li><li>组件属性属性赋值</li><li>组件对象之间引用</li><li>组件对象存活周期管理</li><li>......</li></ul><p>我们只需要编写配置文件告知Spring管理哪些类组件和他们的关系即可！</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>注意：组件是映射到应用程序中所有可重用组件的Java对象，应该是可复用的功能对象！</p><ul><li>组件一定是对象</li><li>对象不一定是组件</li></ul></div><h3 id="组件交给spring的管理优势" tabindex="-1">组件交给Spring的管理优势！ <a class="header-anchor" href="#组件交给spring的管理优势" aria-label="Permalink to &quot;组件交给Spring的管理优势！&quot;">​</a></h3><ol><li><strong>降低了组件之间的耦合性</strong>：Spring loC容器通过依赖注入机制，将组件之间的依赖关系削弱，减少了程序组件之间的耦合性，使得组件更加松散地耦合。</li><li><strong>提高了代码的可重用性和可维护性</strong>：将组件的实例化过程、依赖关系的管理等功能交给Spring loC容器处理，使得组件代码更加模块化、可重用、更易于维护。</li><li><strong>方便了配置和管理</strong>：Spring loC容器通过XML文件或者注解，轻松的对组件进行配置和管理，使得组件的切换、替换等操作更加的方便和快捷。</li><li>交给Spring管理的对象（组件），方可享受Spring框架的其他功能（AOP，声明事务管理）等。</li></ol><h2 id="_2-spring-loc容器和容器实现" tabindex="-1">2 Spring loC容器和容器实现 <a class="header-anchor" href="#_2-spring-loc容器和容器实现" aria-label="Permalink to &quot;2 Spring loC容器和容器实现&quot;">​</a></h2><h3 id="程序中的容器" tabindex="-1">程序中的容器 <a class="header-anchor" href="#程序中的容器" aria-label="Permalink to &quot;程序中的容器&quot;">​</a></h3><p>普通容器：</p><ul><li>数组</li><li>链表</li><li>集合</li><li>......</li></ul><p>复杂容器：</p><ul><li><p>Servlet容器能够管理Servlet、Filter、Listener这样的组件的一生，所以它是一个复杂容器。</p></li><li><p>Spring loC容器也是一个复杂容器。它们不仅要负责创建组件的对象、存储组件的对象，还要负责调用组件的方法让它们工作，最终在特定情况下销毁组件。</p></li></ul><p>总结：Spring管理组件的容器，就是一个复杂容器，不仅存储组件，也可以管理组件之间依赖关系，并且创建和销毁组件等！</p><h3 id="spring-loc容器介绍" tabindex="-1">Spring loC容器介绍 <a class="header-anchor" href="#spring-loc容器介绍" aria-label="Permalink to &quot;Spring loC容器介绍&quot;">​</a></h3><p>Spring loC容器，负责实例化、配置和组装bean(组件)。容器通过读取配置元数据来获取有关要实例化、配置和组装组件的指令。配置元数据以XML、Java注解或Java代码形式表现。它允许表达组成应用程序的组件以及这些组件之间丰富的相互依赖关系。</p><p><img src="'+i+'" alt="container-magic"></p><p>上图显示了Spring容器工作原理的高级视图。应用程序类与配置元数据相结合，您拥有完全配置且可执行的系统或应用程序。</p><h3 id="spring-ioc容器具体接口和实现类" tabindex="-1">Spring IoC容器具体接口和实现类 <a class="header-anchor" href="#spring-ioc容器具体接口和实现类" aria-label="Permalink to &quot;Spring IoC容器具体接口和实现类&quot;">​</a></h3><p>Spring Ioc容器接口：</p><ul><li>BeanFactory：接口提供了一种高级配置机制，能够管理任何类型的对象，它是Spring Ioc容器标准超接口！</li><li>ApplicationContext：是BeanFactory的子接口。它扩展了以下功能 <ol><li>更容易与Spring的AOP功能集成</li><li>消息资源处理（用于国际化）</li><li>特定于应用程序给予此接口实现，例如Web应用程序的WebApplicationContext</li></ol></li></ul><p>简而言之，BeanFactory提供了配置框架和基本功能，而ApplicationContext添加了更多特定于企业的功能。ApplicationContext是BeanFactory的完整超集。</p><p>ApplicationContext容器实现类：</p><p><img src="'+t+'" alt="Snipaste_2023-11-24_16-29-07"></p><table><thead><tr><th>类型名</th><th>简介</th></tr></thead><tbody><tr><td>FileSystemXmlApplicationContext</td><td>通过文件系统路径读取XML格式的配置文件，创建IoC容器对象</td></tr><tr><td>ClassPathXmlApplicationContext</td><td>通过读取类路径下的XML格式的配置文件，创建IoC容器对象</td></tr><tr><td>AnnotationConfigApplicationContext</td><td>通过读取Java配置类，创建IoC容器对象</td></tr><tr><td>WebServerApplicationContext</td><td>为Web应用准备，基于Web环境创建IoC容器对象，并将对象存入ServletContext域中</td></tr></tbody></table><h3 id="springloc容器管理配置方式" tabindex="-1">SpringloC容器管理配置方式 <a class="header-anchor" href="#springloc容器管理配置方式" aria-label="Permalink to &quot;SpringloC容器管理配置方式&quot;">​</a></h3><p>Spring loC容器使用多种形式的配置元数据。此配置元数据表示您作为应用程序开发人员如何告诉Spring容器实例化、配置和组装应用程序中的对象。</p><p>Spring框架提供了多种配置方式：</p><ul><li><p><strong>XML配置方式</strong></p><p>是Spring框架最早的配置方式之一，通过在XML文件中定义Bean及其依赖关系、Bean的作用域等信息，让Spring loC容器来管理Bean之间的依赖关系。该方式从Spring框架的第一版开始提供支持。</p></li><li><p><strong>注解方式</strong></p><p>从Spring2.5版本开始提供支特，可以通过在Bean类上使用注解来代替XML配置文件中的配置信息。通过在Bean类上加上相应的注解（如@Component，@Service，@Autowired等），将Bean注册到Spring loC容器中，这样Spring loC容器就可以管理这些Bean之间的依赖关系。</p></li><li><p><strong>Java配置类方式</strong></p><p>从Spring3.0版本开始提供支持，通过Java类来定义Bean、Bean之间的依赖关系和配置信息，从而代替XML配置文件的方式。Java配置类是一种使用Jva编写配置信息的方式，通过@Configuration、@Bean等注解来实现Bean和依赖关系的配置。</p></li></ul><h2 id="_3-spring-loc概念总结" tabindex="-1">3 Spring loC概念总结 <a class="header-anchor" href="#_3-spring-loc概念总结" aria-label="Permalink to &quot;3 Spring loC概念总结&quot;">​</a></h2><h3 id="ioc容器" tabindex="-1">IoC容器 <a class="header-anchor" href="#ioc容器" aria-label="Permalink to &quot;IoC容器&quot;">​</a></h3><p>Spring loC容器，负责实例化、配置和组装bean(组件)核心容器。容器通过读取配置元数据来获取有关要实例化、配置和组装组件的指令。</p><h3 id="loc-inversion-of-control-控制反转" tabindex="-1">loC(Inversion of Control)控制反转 <a class="header-anchor" href="#loc-inversion-of-control-控制反转" aria-label="Permalink to &quot;loC(Inversion of Control)控制反转&quot;">​</a></h3><p>IoC主要是针对对象的创建和调用控制而言的，也就是说，当应用程序需要使用一个对象时，不再是应用程 序直接创建该对象，而是由oC容器来创建和管理，即控制权由应用程序转移到oC容器中，也就是“反转”了控制权。这种方式基本上是通过依赖查找的方式来实现的，即IoC容器维护着构成应用程序的对象，并负责创建这些对象。</p>',42),s=[p];function g(c,h,d,S,C,u){return o(),r("div",null,s)}const f=a(e,[["render",g]]);export{b as __pageData,f as default};
