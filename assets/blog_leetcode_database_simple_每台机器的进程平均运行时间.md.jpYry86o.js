import{_ as s,o as n,c as a,R as p}from"./chunks/framework.gZp3ZZFg.js";const u=JSON.parse('{"title":"每台机器的进程平均运行时间","description":"","frontmatter":{"hidden":true,"recommend":false,"date":"2023-12-26T16:30:00.000Z"},"headers":[],"relativePath":"blog/leetcode/database/simple/每台机器的进程平均运行时间.md","filePath":"blog/leetcode/database/simple/每台机器的进程平均运行时间.md","lastUpdated":1703584971000}'),e={name:"blog/leetcode/database/simple/每台机器的进程平均运行时间.md"},i=p(`<h1 id="每台机器的进程平均运行时间" tabindex="-1">每台机器的进程平均运行时间 <a class="header-anchor" href="#每台机器的进程平均运行时间" aria-label="Permalink to &quot;每台机器的进程平均运行时间&quot;">​</a></h1><p>表: <code>Activity</code></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>+----------------+---------+</span></span>
<span class="line"><span>| Column Name    | Type    |</span></span>
<span class="line"><span>+----------------+---------+</span></span>
<span class="line"><span>| machine_id     | int     |</span></span>
<span class="line"><span>| process_id     | int     |</span></span>
<span class="line"><span>| activity_type  | enum    |</span></span>
<span class="line"><span>| timestamp      | float   |</span></span>
<span class="line"><span>+----------------+---------+</span></span>
<span class="line"><span>该表展示了一家工厂网站的用户活动。</span></span>
<span class="line"><span>(machine_id, process_id, activity_type) 是当前表的主键（具有唯一值的列的组合）。</span></span>
<span class="line"><span>machine_id 是一台机器的ID号。</span></span>
<span class="line"><span>process_id 是运行在各机器上的进程ID号。</span></span>
<span class="line"><span>activity_type 是枚举类型 (&#39;start&#39;, &#39;end&#39;)。</span></span>
<span class="line"><span>timestamp 是浮点类型,代表当前时间(以秒为单位)。</span></span>
<span class="line"><span>&#39;start&#39; 代表该进程在这台机器上的开始运行时间戳 , &#39;end&#39; 代表该进程在这台机器上的终止运行时间戳。</span></span>
<span class="line"><span>同一台机器，同一个进程都有一对开始时间戳和结束时间戳，而且开始时间戳永远在结束时间戳前面。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>现在有一个工厂网站由几台机器运行，每台机器上运行着 <strong>相同数量的进程</strong> 。编写解决方案，计算每台机器各自完成一个进程任务的平均耗时。</p><p>完成一个进程任务的时间指进程的<code>&#39;end&#39; 时间戳</code> 减去 <code>&#39;start&#39; 时间戳</code>。平均耗时通过计算每台机器上所有进程任务的总耗费时间除以机器上的总进程数量获得。</p><p>结果表必须包含<code>machine_id（机器ID）</code> 和对应的 <strong>average time（平均耗时）</strong> 别名 <code>processing_time</code>，且<strong>四舍五入保留3位小数。</strong></p><p>以 <strong>任意顺序</strong> 返回表。</p><p>具体参考例子如下。</p><p><strong>示例 1:</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>输入：</span></span>
<span class="line"><span>Activity table:</span></span>
<span class="line"><span>+------------+------------+---------------+-----------+</span></span>
<span class="line"><span>| machine_id | process_id | activity_type | timestamp |</span></span>
<span class="line"><span>+------------+------------+---------------+-----------+</span></span>
<span class="line"><span>| 0          | 0          | start         | 0.712     |</span></span>
<span class="line"><span>| 0          | 0          | end           | 1.520     |</span></span>
<span class="line"><span>| 0          | 1          | start         | 3.140     |</span></span>
<span class="line"><span>| 0          | 1          | end           | 4.120     |</span></span>
<span class="line"><span>| 1          | 0          | start         | 0.550     |</span></span>
<span class="line"><span>| 1          | 0          | end           | 1.550     |</span></span>
<span class="line"><span>| 1          | 1          | start         | 0.430     |</span></span>
<span class="line"><span>| 1          | 1          | end           | 1.420     |</span></span>
<span class="line"><span>| 2          | 0          | start         | 4.100     |</span></span>
<span class="line"><span>| 2          | 0          | end           | 4.512     |</span></span>
<span class="line"><span>| 2          | 1          | start         | 2.500     |</span></span>
<span class="line"><span>| 2          | 1          | end           | 5.000     |</span></span>
<span class="line"><span>+------------+------------+---------------+-----------+</span></span>
<span class="line"><span>输出：</span></span>
<span class="line"><span>+------------+-----------------+</span></span>
<span class="line"><span>| machine_id | processing_time |</span></span>
<span class="line"><span>+------------+-----------------+</span></span>
<span class="line"><span>| 0          | 0.894           |</span></span>
<span class="line"><span>| 1          | 0.995           |</span></span>
<span class="line"><span>| 2          | 1.456           |</span></span>
<span class="line"><span>+------------+-----------------+</span></span>
<span class="line"><span>解释：</span></span>
<span class="line"><span>一共有3台机器,每台机器运行着两个进程.</span></span>
<span class="line"><span>机器 0 的平均耗时: ((1.520 - 0.712) + (4.120 - 3.140)) / 2 = 0.894</span></span>
<span class="line"><span>机器 1 的平均耗时: ((1.550 - 0.550) + (1.420 - 0.430)) / 2 = 0.995</span></span>
<span class="line"><span>机器 2 的平均耗时: ((4.512 - 4.100) + (5.000 - 2.500)) / 2 = 1.456</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h2 id="方法一-round-sum-if-count" tabindex="-1">方法一：round + sum + if + count <a class="header-anchor" href="#方法一-round-sum-if-count" aria-label="Permalink to &quot;方法一：round + sum + if + count&quot;">​</a></h2><p>要求四舍五入保留3位小数，使用 <code>round</code> 函数。</p><p>根据计算示例，使用 <code>if</code> 函数将 <code>activity_type</code> 为 &#39;start&#39; 的时间戳修改为负数，然后使用 <code>sum</code> 函数直接累加。</p><blockquote><p>注意：累加的结果需要除以进程数，<code>count(*)</code> 的结果恰好是进程数的两倍，还需要将结果加倍。或者直接使用<code>count(distinct process_id)</code>。</p></blockquote><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    machine_id,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    round</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(activity_type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;start&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-timestamp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">timestamp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) processing_time</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Activity</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">group by</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    machine_id</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>`,15),l=[i];function r(t,c,d,b,h,o){return n(),a("div",null,l)}const k=s(e,[["render",r]]);export{u as __pageData,k as default};
