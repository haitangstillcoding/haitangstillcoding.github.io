import{_ as s,o as i,c as a,R as n}from"./chunks/framework.gZp3ZZFg.js";const l="/assets/Api.ryWsR2GN.png",p="/assets/apiIgnore.5uJRq3hc.png",e="/assets/ApiOperation.ONdgNfbK.png",t="/assets/ApiOperation注解的value和note属性.CqgAXbyl.png",r="/assets/ApiOperation注解的tags属性.BxJsYFJS.png",h="/assets/ApiImplicitParam._CnhuGNc.png",k="/assets/ApiParam.kN_gNEUp.png",o="/assets/ApiResponse.wTA8rzDr.png",d="/assets/ApiModel.ITlEA-LB.png",E="/assets/ApiModelProperty.2foUKETn.png",P=JSON.parse('{"title":"Swagger常用注解","description":"","frontmatter":{"cover":"/blog/swagger/images/swagger-ui.png","recommend":false,"tag":["Swagger"],"date":"2024-01-04T21:50:00.000Z","top":1},"headers":[],"relativePath":"blog/swagger/Swagger常用注解.md","filePath":"blog/swagger/Swagger常用注解.md","lastUpdated":1704460104000}'),g={name:"blog/swagger/Swagger常用注解.md"},c=n(`<h1 id="swagger常用注解" tabindex="-1">Swagger常用注解 <a class="header-anchor" href="#swagger常用注解" aria-label="Permalink to &quot;Swagger常用注解&quot;">​</a></h1><h2 id="类的注解" tabindex="-1">类的注解 <a class="header-anchor" href="#类的注解" aria-label="Permalink to &quot;类的注解&quot;">​</a></h2><h3 id="api-资源描述" tabindex="-1">@Api：资源描述 <a class="header-anchor" href="#api-资源描述" aria-label="Permalink to &quot;@Api：资源描述&quot;">​</a></h3><p>标识这个类是 Swagger 的资源</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Api</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;学生管理&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RestController</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RequestMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;api/student&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StudentController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>可以设置的属性如下：</p><p><img src="`+l+'" alt="ApiInfo"></p><ul><li><p>values：字符串；说明该类的作用，在类旁边的小字显示</p></li><li><p>tags：字符串；标签（也可理解成分类），会替换 Controller 名称；当多个 Controller 的 tags 相同时，它们的方法会在一起显示</p></li><li><p>consumes：字符串；指定处理请求的提交内容类型 Content-Type ，例如 application/json</p></li><li><p>produces：字符串；指定返回的内容类型，即仅当请求头的 Accept 类型中包含该指定类型才返回，例如：application/json</p></li><li><p>protocols：字符串；标识当前的请求支持的协议，例如：http、https、ws</p></li><li><p>hidden：true/false；隐藏整个 Controller，作用与 @ApiIgnore 相似，但没有 @ApiIgnore 功能强大</p></li></ul><h3 id="apiignore-资源过滤" tabindex="-1">@ApiIgnore：资源过滤 <a class="header-anchor" href="#apiignore-资源过滤" aria-label="Permalink to &quot;@ApiIgnore：资源过滤&quot;">​</a></h3><p>@ApiIgnore 可以用在类、方法上，方法参数中，用来屏蔽某些接口或参数，使其不在页面上显示。</p><p><img src="'+p+'" alt="apiIgnore"></p><h2 id="方法的注解" tabindex="-1">方法的注解 <a class="header-anchor" href="#方法的注解" aria-label="Permalink to &quot;方法的注解&quot;">​</a></h2><h3 id="apioperation-方法描述" tabindex="-1">@ApiOperation：方法描述 <a class="header-anchor" href="#apioperation-方法描述" aria-label="Permalink to &quot;@ApiOperation：方法描述&quot;">​</a></h3><p>@ApiOperation 注解提供了很多属性供我们来描述接口信息。</p><p><img src="'+e+'" alt="ApiOperation"></p><ul><li><p>value：字符串；方法摘要，在路径旁显示</p></li><li><p>note：字符串；方法详细描述</p><p><img src="'+t+'" alt="ApiOperation注解的value和note属性"></p></li><li><p>tags：字符串数组；对方法进行分类，一个方法可以有多个分类</p><p><img src="'+r+`" alt="ApiOperation注解的tags属性"></p></li><li><p>response：Class；设置当前请求的返回值类型，String.class；会覆盖自动识别的返回类型，一般用不上</p></li><li><p>responseContainer：字符串；说明包装的容器，默认情况下，有效值为 List、Set、Map；在定义通用 Response 后，一般用不上</p></li><li><p>httpMethod：字符串；指定请求方式，比如 GET、POST、PUT</p></li><li><p>consumes：字符串；指定处理请求的提交内容类型(Content-Type)，例如 application/json</p></li><li><p>produces：字符串；指定返回的内容类型，即仅当请求头的 Accept 类型中包含该指定类型才返回，例如:application/json</p></li></ul><h3 id="apiimplicitparam-s-参数描述" tabindex="-1">@ApiImplicitParam(s)：参数描述 <a class="header-anchor" href="#apiimplicitparam-s-参数描述" aria-label="Permalink to &quot;@ApiImplicitParam(s)：参数描述&quot;">​</a></h3><p>参数描述，可用在方法头。ApiImplicitParams 只有一个属性 <code>ApiImplicitParam[] value(); </code>是 ApiImplicitParam 的数组，比如</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ApiImplicitParams</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ApiImplicitParam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;商户ID&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GetMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/{id}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Response </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMerchantsInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PathVariable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Integer id) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>所以，来看看 @ApiImplicitParam 有哪些属性：</p><p><img src="`+h+`" alt="ApiImplicitParam"></p><ul><li><strong>name</strong>：字符串；参数名</li><li><strong>value</strong>：字符串；参数的汉字说明、解释</li><li>defaultValue：字符串；参数的默认值</li><li>allowableValues：字符串；限制此参数接收的值，可使用的值或值得范围 <ul><li><code>(</code>表示是大于，<code>)</code>表示是小于</li><li><code>[</code>表示是大于等于，<code>]</code>表示是小于等于</li><li><code>infinity</code>表示无限大，<code>-infinity</code>表示负无限大</li></ul></li><li>allowEmptyValue：true/false；允许参数为空，默认为 false</li><li><strong>required</strong>：true/false；参数是否必须传</li><li><strong>paramType</strong>：字符串；参数放在哪个地方（可以自动识别）</li><li>header --&gt; 参数在request headers 里边提交：@RequestHeader <ul><li>path（用于restful接口）–&gt; 参数以地址的形式提交：@PathVariable</li><li>query --&gt; 直接跟参数完成自动映射赋值：@RequestParam</li><li>form --&gt; 以form表单的形式提交，仅支持POST：@RequestParam</li><li>body --&gt; 以流的形式提交，仅支持POST：@RequestBody</li></ul></li><li><strong>dataType</strong>：字符串；参数类型，参数的数据类型（默认String），可以使用类名或原始数据类型（使用不当汇报类型转换异常）</li><li>dataTypeClass：Class；参数的类，如果提供则覆盖 dataType</li><li>example：字符串；非请求体（body）参数的<strong>单个请求</strong>示例</li><li>examples：Example；参数的举例说明，仅适用于 body 类型。</li></ul><h3 id="apiparam-参数描述" tabindex="-1">@ApiParam：参数描述 <a class="header-anchor" href="#apiparam-参数描述" aria-label="Permalink to &quot;@ApiParam：参数描述&quot;">​</a></h3><p>参数描述，用在每个参数前面，比如</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PostMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/create&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 注：这里如果使用 @ApiImplicitParam 会出现无法识别的问题</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Response </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createMerchants</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ApiParam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;request&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;创建商户请求对象&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RequestBody</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CreateMerchantsRequest request) </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1234</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>@ApiParam 的可以设置的属性如下：</p><p><img src="`+k+`" alt="ApiParam"></p><ul><li><strong>name</strong>：字符串；参数名</li><li><strong>value</strong>：字符串；参数的汉字说明、解释</li><li>defaultValue：字符串；参数默认值</li><li>allowableValues：字符串；限制此参数接收的值，可使用的值或值得范围 <ul><li><code>(</code>表示是大于，<code>)</code>表示是小于</li><li><code>[</code>表示是大于等于，<code>]</code>表示是小于等于</li><li><code>infinity</code>表示无限大，<code>-infinity</code>表示负无限大</li></ul></li><li>allowEmptyValue：true/false；允许参数为空，默认为 false</li><li><strong>required</strong>：true/false；参数是否必须传</li><li>example：字符串；非请求体（body）参数的<strong>单个请求</strong>示例</li><li>examples：Example；参数的举例说明，仅适用于 body 类型。</li></ul><blockquote><p>关于 @ApiImplicitParam 和 @ApiParm 它俩都能为方法的请求参数做注释，区别有：</p></blockquote><ol><li>@ApiImplicitParam 可以在方法前使用，而 @ApiParm 只能在参数前使用</li><li>@ApiImplicitParam 提供的可设置属性更多，特别是 <strong>paramType</strong> 很关键</li><li>对于 @RequestBody 标识的 Json 字符串，不能使用 @ApiImplicitParam，会出现无法识别的情况 <ol><li>方案一：通过 @ApiParm 对 @RequestBody 的参数进行说明</li><li>方案二：直接不对该参数使用注解，将注释的任务交给实体类（@ApiModel）</li></ol></li></ol><p>另外，两者是可以混搭使用的，一般推荐使用 @ApiImplicitParam(s)，但是注意 @RequestBody 的情况。</p><h3 id="apiresponse-s" tabindex="-1">@ApiResponse(s) <a class="header-anchor" href="#apiresponse-s" aria-label="Permalink to &quot;@ApiResponse(s)&quot;">​</a></h3><p>跟上面 @ApiImplicitParam(s) 一样，@ApiResponses 也是只有唯一个属性<code>ApiResponse[] value();</code></p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ApiResponses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ApiResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">code</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;非HTTP状态码，Response code字段值，描述：成功，返回该商户ID&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ApiResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">code</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;非HTTP状态码，Response code字段值，描述：失败&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PostMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/create&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Response createMerchants</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>下面来看看 @ApiResponse 有哪些属性</p><p><img src="`+o+`" alt="ApiResponse"></p><ul><li><strong>code</strong>：整形数；相应的状态码</li><li><strong>message</strong>：字符串；相应消息，例如&quot;电话号码已存在&quot;</li><li><strong>response</strong>：Class；消息有效负载的可选响应类，对应于响应消息对象的 schema 字段；对于使用通用 Response 的情况，该字段很关键</li><li>responseHeaders：ResponseHeader[]；可能响应的 header 列表</li><li>responseContainer：String；声明响应的容器，有效值为List,Set,Map，任何其他值都将被忽略</li></ul><h2 id="实体类的注解" tabindex="-1">实体类的注解 <a class="header-anchor" href="#实体类的注解" aria-label="Permalink to &quot;实体类的注解&quot;">​</a></h2><h3 id="apimodel-实体类描述" tabindex="-1">@ApiModel：实体类描述 <a class="header-anchor" href="#apimodel-实体类描述" aria-label="Permalink to &quot;@ApiModel：实体类描述&quot;">​</a></h3><p>用于请求类或者响应类上，表示一个返回响应数据的信息</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ApiModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;创建商户的请求对象&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AllArgsConstructor</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NoArgsConstructor</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CreateMerchantsRequest</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>@ApiModel 可以设置的属性有：</p><p><img src="`+d+`" alt="ApiModel"></p><ul><li><strong>value</strong>：字符串；实体类的备用名，如果不设置，则会采用原类名</li><li>description：字符串；实体类的说明</li><li>parent：Class；父类的一些信息</li></ul><h3 id="apimodelproperty-实体类成员描述" tabindex="-1">@ApiModelProperty：实体类成员描述 <a class="header-anchor" href="#apimodelproperty-实体类成员描述" aria-label="Permalink to &quot;@ApiModelProperty：实体类成员描述&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ApiModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;创建商户的请求对象&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AllArgsConstructor</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NoArgsConstructor</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CreateMerchantsRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ApiModelProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;商户名&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String name;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ApiModelProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;商户logo的URL&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String logoUrl;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ApiModelProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;营业执照URL&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String businessLicenseUrl;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ApiModelProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;联系电话&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String phone;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ApiModelProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;地址&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String address;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>ApiModelProperty 可以设置的属性有：</p><p><img src="`+E+'" alt="ApiModelProperty"></p><ul><li><strong>value</strong>：字符串；字段说明</li><li>name：字符串；重写字段名称</li><li>dataType：字符串；重写字段类型</li><li>required：true/false；是否必填</li><li>allowableValues：字符串；限制此参数接收的值，可使用的值或值得范围 <ul><li><code>(</code>表示是大于，<code>)</code>表示是小于</li><li><code>[</code>表示是大于等于，<code>]</code>表示是小于等于</li><li><code>infinity</code>表示无限大，<code>-infinity</code>表示负无限大</li></ul></li><li>allowEmptyValue：true/false；允许参数为空，默认为 false</li><li>example：String；示例</li><li>hidden：true/false；是否在文档中隐藏该字段</li></ul>',49),u=[c];function y(m,b,A,F,q,C){return i(),a("div",null,u)}const D=s(g,[["render",y]]);export{P as __pageData,D as default};
