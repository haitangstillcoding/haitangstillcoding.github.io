import{_ as s,o as n,c as a,U as p}from"./chunks/framework.nmnrFtMU.js";const u=JSON.parse('{"title":"按日期分组销售产品","description":"","frontmatter":{"hidden":true,"recommend":false,"date":"2023-12-24T14:00:00.000Z"},"headers":[],"relativePath":"blog/leetcode/database/simple/按日期分组销售产品.md","filePath":"blog/leetcode/database/simple/按日期分组销售产品.md","lastUpdated":1703552913000}'),e={name:"blog/leetcode/database/simple/按日期分组销售产品.md"},i=p(`<h1 id="按日期分组销售产品" tabindex="-1">按日期分组销售产品 <a class="header-anchor" href="#按日期分组销售产品" aria-label="Permalink to &quot;按日期分组销售产品&quot;">​</a></h1><p>表 <code>Activities</code>：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>+-------------+---------+</span></span>
<span class="line"><span>| 列名         | 类型    |</span></span>
<span class="line"><span>+-------------+---------+</span></span>
<span class="line"><span>| sell_date   | date    |</span></span>
<span class="line"><span>| product     | varchar |</span></span>
<span class="line"><span>+-------------+---------+</span></span>
<span class="line"><span>该表没有主键(具有唯一值的列)。它可能包含重复项。</span></span>
<span class="line"><span>此表的每一行都包含产品名称和在市场上销售的日期。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>编写解决方案找出每个日期、销售的不同产品的数量及其名称。 每个日期的销售产品名称应按词典序排列。 返回按 <code>sell_date</code> 排序的结果表。 结果表结果格式如下例所示。</p><p><strong>示例 1:</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>输入：</span></span>
<span class="line"><span>Activities 表：</span></span>
<span class="line"><span>+------------+-------------+</span></span>
<span class="line"><span>| sell_date  | product     |</span></span>
<span class="line"><span>+------------+-------------+</span></span>
<span class="line"><span>| 2020-05-30 | Headphone   |</span></span>
<span class="line"><span>| 2020-06-01 | Pencil      |</span></span>
<span class="line"><span>| 2020-06-02 | Mask        |</span></span>
<span class="line"><span>| 2020-05-30 | Basketball  |</span></span>
<span class="line"><span>| 2020-06-01 | Bible       |</span></span>
<span class="line"><span>| 2020-06-02 | Mask        |</span></span>
<span class="line"><span>| 2020-05-30 | T-Shirt     |</span></span>
<span class="line"><span>+------------+-------------+</span></span>
<span class="line"><span>输出：</span></span>
<span class="line"><span>+------------+----------+------------------------------+</span></span>
<span class="line"><span>| sell_date  | num_sold | products                     |</span></span>
<span class="line"><span>+------------+----------+------------------------------+</span></span>
<span class="line"><span>| 2020-05-30 | 3        | Basketball,Headphone,T-shirt |</span></span>
<span class="line"><span>| 2020-06-01 | 2        | Bible,Pencil                 |</span></span>
<span class="line"><span>| 2020-06-02 | 1        | Mask                         |</span></span>
<span class="line"><span>+------------+----------+------------------------------+</span></span>
<span class="line"><span>解释：</span></span>
<span class="line"><span>对于2020-05-30，出售的物品是 (Headphone, Basketball, T-shirt)，按词典序排列，并用逗号 &#39;,&#39; 分隔。</span></span>
<span class="line"><span>对于2020-06-01，出售的物品是 (Pencil, Bible)，按词典序排列，并用逗号分隔。</span></span>
<span class="line"><span>对于2020-06-02，出售的物品是 (Mask)，只需返回该物品名。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h2 id="方法一-字符串的分组与聚合" tabindex="-1">方法一：字符串的分组与聚合 <a class="header-anchor" href="#方法一-字符串的分组与聚合" aria-label="Permalink to &quot;方法一：字符串的分组与聚合&quot;">​</a></h2><p>我们按照 <code>sell_date</code> 列对数据进行分组，为了得到 <code>num_sold</code> 列，我们使用 <code>COUNT(DISTINCT product)</code> 来统计每个销售日期售出的唯一产品的数量。 最具挑战性的部分是对每个组中所有唯一的名称进行排序和连接，以获得 <code>products</code> 列。我们可以使用函数 <code>GROUP_CONCAT()</code> 将多行中的多个值组合成一个字符串。下面显示了 <code>GROUP_CONCAT()</code> 函数的语法：</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GROUP_CONCAT(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    DISTINCT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> expression1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ORDER BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> expression2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    SEPARATOR sep</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>关键词 <code>DISTINCT</code> 确保了 <code>expression1</code> 列中的每个名称在连接的字符串中只包含一次。请注意，我们需要对唯一的名称进行升序排序，这是默认的顺序，因此可以省略参数 <code>expression2</code>。关键字 <code>SEPARATOR</code> 指定产品名称应以 <code>sep</code> 分隔。总而言之，我们使用 <code>GROUP_CONCAT</code> 如下。</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GROUP_CONCAT(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    DISTINCT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    SEPARATOR </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;,&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这会将不同的产品名称连接到每个销售日期的单个字符串中。最后，我们根据 <code>sell_date</code> 对最终结果进行升序排序。这确保输出表的组织顺序是从最早的销售日期到最晚的销售日期。完整的代码如下：</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sell_date,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">distinct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product) num_sold,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    group_concat(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">distinct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">order by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product separator </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;,&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) products</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Activities</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">group by</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sell_date</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>`,13),l=[i];function r(c,t,d,h,b,o){return n(),a("div",null,l)}const m=s(e,[["render",r]]);export{u as __pageData,m as default};
