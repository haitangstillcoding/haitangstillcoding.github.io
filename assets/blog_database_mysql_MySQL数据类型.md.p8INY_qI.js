import{_ as e,o as t,c as d,R as o}from"./chunks/framework.gZp3ZZFg.js";const a="/assets/mysql数据类型.DQKAjMhU.png",m=JSON.parse('{"title":"MySQL数据类型","description":"","frontmatter":{"cover":"/blog/database/mysql/images/mysql数据类型.png","recommend":false,"tag":["MySQL"],"date":"2023-11-26T21:00:00.000Z"},"headers":[],"relativePath":"blog/database/mysql/MySQL数据类型.md","filePath":"blog/database/mysql/MySQL数据类型.md","lastUpdated":null}'),c={name:"blog/database/mysql/MySQL数据类型.md"},l=o('<h1 id="mysql数据类型" tabindex="-1">MySQL数据类型 <a class="header-anchor" href="#mysql数据类型" aria-label="Permalink to &quot;MySQL数据类型&quot;">​</a></h1><p>MySQL的数据类型简单分为三类：</p><p><img src="'+a+'" alt="mysql数据类型"></p><h2 id="整数类型的unsigned-属性有什么用" tabindex="-1">整数类型的UNSIGNED 属性有什么用？ <a class="header-anchor" href="#整数类型的unsigned-属性有什么用" aria-label="Permalink to &quot;整数类型的UNSIGNED 属性有什么用？&quot;">​</a></h2><p>MySQL 中的整数类型可以使用可选的 <code>UNSIGNED </code>属性来表示不允许负值的无符号整数。使用 ~属性可以将正整数的上限提高一倍，因为它不需要存储负数值。</p><p>例如， <code>TINYINT UNSIGNED </code> 类型的取值范围是 0 ~ 255，而普通的 <code>TINY</code> 类型的值范围是 -128 ~ 127。<code>INT UNSIGNED </code> 类型的取值范围是 0 ~ 4,294,967,295，而普通的 <code>INT</code> 类型的值范围是 2,147,483,648 ~ 2,147,483,647。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>对于从 0 开始递增的 ID 列，使用<code>UNSIGNED </code>属性可以非常适合，因为不允许负值并且可以拥有更大的上限范围，提供了更多的 ID 值可用。</p></div><h2 id="char和varchar的区别是什么" tabindex="-1">CHAR和VARCHAR的区别是什么？ <a class="header-anchor" href="#char和varchar的区别是什么" aria-label="Permalink to &quot;CHAR和VARCHAR的区别是什么？&quot;">​</a></h2><p><code>CHAR</code> 和 <code>VARCHAR</code> 是最常用到的字符串类型，两者的主要区别在于：<strong><code>CHAR</code>是定长字符串，<code>VARCHAR</code>是变长字符串。</strong></p><ul><li><p>长度：</p><p><code>CHAR</code>在存储时会在右边填充空格以达到指定的长度，检索时会去掉空格；<code>VARCHAR</code>在存储时需要使用 1 或 2 个额外字节记录字符串的长度，检索时不需要处理。</p></li><li><p>适用场景：</p><p>CHAR更适合存储长度较短或者长度都差不多的字符串，例如 Bcrypt 算法、MD5 算法加密后的密码、身份证号码。VARCHAR类型适合存储长度不确定或者差异较大的字符串，例如用户昵称、文章标题等。</p></li><li><p>最大值：</p><p>CHAR(M) 和 VARCHAR(M) 的 M 都代表能够保存的字符数的最大值，无论是字母、数字还是中文，每个都只占用一个字符。</p></li></ul><h2 id="varchar-100-和-varchar-10-的区别是什么" tabindex="-1">VARCHAR(100)和 VARCHAR(10)的区别是什么？ <a class="header-anchor" href="#varchar-100-和-varchar-10-的区别是什么" aria-label="Permalink to &quot;VARCHAR(100)和 VARCHAR(10)的区别是什么？&quot;">​</a></h2><p>先举个例子：如果要存储<code>&#39;hello12345&#39;</code>这个字符串，使用<code>VARCHAR(10)</code>和<code>VARCHAR(100)</code>存储，占用磁盘空间是一样的么？</p><p>答案是：占用磁盘的存储空间是一样的。</p><p><strong>既然存储时磁盘占用空间一样，还有什么其他的区别吗？</strong></p><p>虽然使用<code>VARCHAR(100)</code>和<code>VARCHAR(10)</code>存储<code>&#39;hello12345&#39;</code>字符串占用的磁盘空间一样，但是消耗的内存不一样，更长的列消耗的内存会更多。因为MySQL通常会分配固定大小的内存块来保存内部值。尤其是使用临时表进行排序会操作时，会消耗更多的内存。在使用磁盘进行排序时，也是一样。</p><p>所以此时<code>VARCHAR(100)</code> <em><strong>会消耗更多的内存。</strong></em></p><p><strong>VARCHAR(10)和VARCHAR(100)的优劣势是什么？</strong></p><p>因为涉及到文件排序或者基于磁盘的临时表时，更长的列会消耗更多的内存，所以在使用使用时，我们不能太过浪费内存空间，还是需要评估实际使用的长度来设置字符的长度。<em><strong>推荐冗余10%的长度</strong></em>（因业务而异）。</p><p>所使用VARCHAR(10)会更加<em><strong>节约内存空间</strong></em>，但是实际业务中字符长度一旦超过10就需要更改表结构，在表数据量特别大时，<em><strong>不易拓展</strong></em>。</p><p>而这时使用更长的列：VARCHAR(100)无需更改表结构，<em><strong>业务拓展性更好</strong></em>。</p><h2 id="decimal-和-float-double-的区别是什么" tabindex="-1">DECIMAL 和 FLOAT/DOUBLE 的区别是什么？ <a class="header-anchor" href="#decimal-和-float-double-的区别是什么" aria-label="Permalink to &quot;DECIMAL 和 FLOAT/DOUBLE 的区别是什么？&quot;">​</a></h2><p>DECIMAL 和 FLOAT 的区别是：<strong>DECIMAL 是定点数，FLOAT/DOUBLE 是浮点数。DECIMAL 可以存储精确的小数值，FLOAT/DOUBLE 只能存储近似的小数值。</strong></p><p>DECIMAL 用于存储具有精度要求的小数，例如与货币相关的数据，可以避免浮点数带来的精度损失。在 Java 中，MySQL 的 DECIMAL 类型对应的是 Java 类 <code>java.math.BigDecimal</code></p><h2 id="为什么不推荐使用-text-和-blob" tabindex="-1">为什么不推荐使用 TEXT 和 BLOB？ <a class="header-anchor" href="#为什么不推荐使用-text-和-blob" aria-label="Permalink to &quot;为什么不推荐使用 TEXT 和 BLOB？&quot;">​</a></h2><p>TEXT 类型类似于 CHAR（0-255 字节）和 VARCHAR（0-65,535 字节），但可以存储更长的字符串，即长文本数据，例如博客内容。</p><table><thead><tr><th>类型</th><th>可存储大小</th><th>用途</th></tr></thead><tbody><tr><td>TINYTEXT</td><td>0-255 字节</td><td>一般文本字符串</td></tr><tr><td>TEXT</td><td>0-65,535 字节</td><td>长文本字符串</td></tr><tr><td>MEDIUMTEXT</td><td>0-16,772,150 字节</td><td>较大文本数据</td></tr><tr><td>LONGTEXT</td><td>0-4,294,967,295 字节</td><td>极大文本数据</td></tr></tbody></table><p>BLOB 类型主要用于存储二进制大对象，例如图片、音视频等文件。</p><table><thead><tr><th>类型</th><th>可存储大小</th><th>用途</th></tr></thead><tbody><tr><td>TINYBLOB</td><td>0-255 字节</td><td>短文本二进制字符串</td></tr><tr><td>BLOB</td><td>0-65KB</td><td>二进制字符串</td></tr><tr><td>MEDIUMBLOB</td><td>0-16MB</td><td>二进制形式的长文本数据</td></tr><tr><td>LONGBLOB</td><td>0-4GB</td><td>二进制形式的极大文本数据</td></tr></tbody></table><p>在日常开发中，很少使用 TEXT 类型，但偶尔会用到，而 BLOB 类型则基本不常用。如果预期长度范围可以通过 VARCHAR 来满足，建议避免使用 TEXT。</p><p>数据库规范通常不推荐使用 BLOB 和 TEXT 类型，这两种类型具有一些缺点和限制，例如：</p><ul><li>不能有默认值。</li><li>在使用临时表时无法使用内存临时表，只能在磁盘上创建临时表（《高性能 MySQL》书中有提到）。</li><li>检索效率较低。</li><li>不能直接创建索引，需要指定前缀长度。</li><li>可能会消耗大量的网络和 IO 带宽。</li><li>可能导致表上的 DML 操作变慢。</li><li>……</li></ul><h2 id="datetime-和-timestamp-的区别是什么" tabindex="-1">DATETIME 和 TIMESTAMP 的区别是什么？ <a class="header-anchor" href="#datetime-和-timestamp-的区别是什么" aria-label="Permalink to &quot;DATETIME 和 TIMESTAMP 的区别是什么？&quot;">​</a></h2><p>DATETIME 类型没有时区信息，TIMESTAMP 和时区有关。</p><p>TIMESTAMP 只需要使用 4 个字节的存储空间，但是 DATETIME 需要耗费 8 个字节的存储空间。但是，这样同样造成了一个问题，Timestamp 表示的时间范围更小。</p><ul><li>DATETIME：1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</li><li>Timestamp：1970-01-01 00:00:01 ~ 2037-12-31 23:59:59</li></ul><p>关于两者的详细对比，请参考我写的<a href="https://javaguide.cn/database/mysql/some-thoughts-on-database-storage-time.html" target="_blank" rel="noreferrer">MySQL 时间类型数据存储建议</a>。</p><h2 id="null-和-的区别是什么" tabindex="-1">NULL 和 &#39;&#39; 的区别是什么？ <a class="header-anchor" href="#null-和-的区别是什么" aria-label="Permalink to &quot;NULL 和 &#39;&#39; 的区别是什么？&quot;">​</a></h2><p><code>NULL</code> 跟 <code>&#39;&#39;</code>(空字符串)是两个完全不一样的值，区别如下：</p><ul><li><code>NULL</code> 代表一个不确定的值,就算是两个 <code>NULL</code>,它俩也不一定相等。例如，<code>SELECT NULL=NULL</code>的结果为 false，但是在我们使用<code>DISTINCT</code>,<code>GROUP BY</code>,<code>ORDER BY</code>时,<code>NULL</code>又被认为是相等的。</li><li><code>&#39;&#39;</code>的长度是 0，是不占用空间的，而<code>NULL</code> 是需要占用空间的。</li><li><code>NULL</code> 会影响聚合函数的结果。例如，<code>SUM</code>、<code>AVG</code>、<code>MIN</code>、<code>MAX</code> 等聚合函数会忽略 <code>NULL</code> 值。 <code>COUNT</code> 的处理方式取决于参数的类型。如果参数是 <code>*</code>(<code>COUNT(*)</code>)，则会统计所有的记录数，包括 <code>NULL</code> 值；如果参数是某个字段名(<code>COUNT(列名)</code>)，则会忽略 <code>NULL</code> 值，只统计非空值的个数。</li><li>查询 <code>NULL</code> 值时，必须使用 <code>IS NULL</code> 或 <code>IS NOT NULLl</code> 来判断，而不能使用 =、!=、 &lt;、&gt; 之类的比较运算符。而<code>&#39;&#39;</code>是可以使用这些比较运算符的。</li></ul><p>看了上面的介绍之后，相信你对另外一个高频面试题：“为什么 MySQL 不建议使用 <code>NULL</code> 作为列默认值？”也有了答案。</p><h2 id="boolean-类型如何表示" tabindex="-1">Boolean 类型如何表示？ <a class="header-anchor" href="#boolean-类型如何表示" aria-label="Permalink to &quot;Boolean 类型如何表示？&quot;">​</a></h2><p>MySQL 中没有专门的布尔类型，而是用 TINYINT(1) 类型来表示布尔值。TINYINT(1) 类型可以存储 0 或 1，分别对应 false 或 true。</p>',42),r=[l];function i(s,p,h,n,A,L){return t(),d("div",null,r)}const R=e(c,[["render",i]]);export{m as __pageData,R as default};
